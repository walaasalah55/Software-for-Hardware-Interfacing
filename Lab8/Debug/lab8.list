
lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000564  08000564  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000564  08000564  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08000564  08000564  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000564  08000564  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000564  08000564  00010564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000568  08000568  00010568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800056c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000003c  080005a8  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080005a8  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000834  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002f5  00000000  00000000  000208a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00020b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00020c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc8f  00000000  00000000  00020ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007b7  00000000  00000000  0002e96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fbca  00000000  00000000  0002f126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007ecf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  0007ed44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800054c 	.word	0x0800054c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	0800054c 	.word	0x0800054c

080001d4 <GPIO_EnableClock>:

void delay1000ms() {
  for (int i = 0; i < 1000000; i++) {}
}

void GPIO_EnableClock(unsigned char PortId) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

	*RCC_AHB1ENR |= (0x01 <<PortId );
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <GPIO_EnableClock+0x2c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <GPIO_EnableClock+0x2c>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]

}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023830 	.word	0x40023830

08000204 <GPIO_Init>:

void GPIO_Init(unsigned char PortId, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000204:	b490      	push	{r4, r7}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4604      	mov	r4, r0
 800020c:	4608      	mov	r0, r1
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	4623      	mov	r3, r4
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	4603      	mov	r3, r0
 8000218:	71bb      	strb	r3, [r7, #6]
 800021a:	460b      	mov	r3, r1
 800021c:	717b      	strb	r3, [r7, #5]
 800021e:	4613      	mov	r3, r2
 8000220:	713b      	strb	r3, [r7, #4]

      //MODER
	*lookup[PortId][0] &= ~(0x03 << 2 * PinNum);
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	4956      	ldr	r1, [pc, #344]	; (8000380 <GPIO_Init+0x17c>)
 8000226:	4613      	mov	r3, r2
 8000228:	005b      	lsls	r3, r3, #1
 800022a:	4413      	add	r3, r2
 800022c:	00db      	lsls	r3, r3, #3
 800022e:	440b      	add	r3, r1
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	6819      	ldr	r1, [r3, #0]
 8000234:	79bb      	ldrb	r3, [r7, #6]
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	2203      	movs	r2, #3
 800023a:	fa02 f303 	lsl.w	r3, r2, r3
 800023e:	43db      	mvns	r3, r3
 8000240:	461c      	mov	r4, r3
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	484e      	ldr	r0, [pc, #312]	; (8000380 <GPIO_Init+0x17c>)
 8000246:	4613      	mov	r3, r2
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	4413      	add	r3, r2
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	4403      	add	r3, r0
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	ea01 0204 	and.w	r2, r1, r4
 8000256:	601a      	str	r2, [r3, #0]
	*lookup[PortId][0] |= PinMode << 2 * PinNum;
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	4949      	ldr	r1, [pc, #292]	; (8000380 <GPIO_Init+0x17c>)
 800025c:	4613      	mov	r3, r2
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	4413      	add	r3, r2
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	440b      	add	r3, r1
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	6819      	ldr	r1, [r3, #0]
 800026a:	797a      	ldrb	r2, [r7, #5]
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	fa02 f303 	lsl.w	r3, r2, r3
 8000274:	461c      	mov	r4, r3
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	4841      	ldr	r0, [pc, #260]	; (8000380 <GPIO_Init+0x17c>)
 800027a:	4613      	mov	r3, r2
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	4413      	add	r3, r2
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	4403      	add	r3, r0
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	ea41 0204 	orr.w	r2, r1, r4
 800028a:	601a      	str	r2, [r3, #0]
     //OTYPER
	*lookup[PortId][1] &= ~(1 << PinNum);
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	493c      	ldr	r1, [pc, #240]	; (8000380 <GPIO_Init+0x17c>)
 8000290:	4613      	mov	r3, r2
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	4413      	add	r3, r2
 8000296:	00db      	lsls	r3, r3, #3
 8000298:	440b      	add	r3, r1
 800029a:	3304      	adds	r3, #4
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6819      	ldr	r1, [r3, #0]
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	2201      	movs	r2, #1
 80002a4:	fa02 f303 	lsl.w	r3, r2, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	461c      	mov	r4, r3
 80002ac:	79fa      	ldrb	r2, [r7, #7]
 80002ae:	4834      	ldr	r0, [pc, #208]	; (8000380 <GPIO_Init+0x17c>)
 80002b0:	4613      	mov	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	4403      	add	r3, r0
 80002ba:	3304      	adds	r3, #4
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	ea01 0204 	and.w	r2, r1, r4
 80002c2:	601a      	str	r2, [r3, #0]
	*lookup[PortId][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80002c4:	79fa      	ldrb	r2, [r7, #7]
 80002c6:	492e      	ldr	r1, [pc, #184]	; (8000380 <GPIO_Init+0x17c>)
 80002c8:	4613      	mov	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	4413      	add	r3, r2
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	440b      	add	r3, r1
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6819      	ldr	r1, [r3, #0]
 80002d8:	793b      	ldrb	r3, [r7, #4]
 80002da:	f003 0201 	and.w	r2, r3, #1
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	461c      	mov	r4, r3
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	4825      	ldr	r0, [pc, #148]	; (8000380 <GPIO_Init+0x17c>)
 80002ea:	4613      	mov	r3, r2
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	4413      	add	r3, r2
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	4403      	add	r3, r0
 80002f4:	3304      	adds	r3, #4
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	ea41 0204 	orr.w	r2, r1, r4
 80002fc:	601a      	str	r2, [r3, #0]
	 //PUPDR
	*lookup[PortId][3] &= ~(0x03 << 2 * PinNum);
 80002fe:	79fa      	ldrb	r2, [r7, #7]
 8000300:	491f      	ldr	r1, [pc, #124]	; (8000380 <GPIO_Init+0x17c>)
 8000302:	4613      	mov	r3, r2
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	4413      	add	r3, r2
 8000308:	00db      	lsls	r3, r3, #3
 800030a:	440b      	add	r3, r1
 800030c:	330c      	adds	r3, #12
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	6819      	ldr	r1, [r3, #0]
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	2203      	movs	r2, #3
 8000318:	fa02 f303 	lsl.w	r3, r2, r3
 800031c:	43db      	mvns	r3, r3
 800031e:	461c      	mov	r4, r3
 8000320:	79fa      	ldrb	r2, [r7, #7]
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <GPIO_Init+0x17c>)
 8000324:	4613      	mov	r3, r2
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	4413      	add	r3, r2
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	4403      	add	r3, r0
 800032e:	330c      	adds	r3, #12
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	ea01 0204 	and.w	r2, r1, r4
 8000336:	601a      	str	r2, [r3, #0]
	*lookup[PortId][3] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000338:	79fa      	ldrb	r2, [r7, #7]
 800033a:	4911      	ldr	r1, [pc, #68]	; (8000380 <GPIO_Init+0x17c>)
 800033c:	4613      	mov	r3, r2
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4413      	add	r3, r2
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	440b      	add	r3, r1
 8000346:	330c      	adds	r3, #12
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6819      	ldr	r1, [r3, #0]
 800034c:	793b      	ldrb	r3, [r7, #4]
 800034e:	105b      	asrs	r3, r3, #1
 8000350:	f003 0203 	and.w	r2, r3, #3
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	fa02 f303 	lsl.w	r3, r2, r3
 800035c:	461c      	mov	r4, r3
 800035e:	79fa      	ldrb	r2, [r7, #7]
 8000360:	4807      	ldr	r0, [pc, #28]	; (8000380 <GPIO_Init+0x17c>)
 8000362:	4613      	mov	r3, r2
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	4413      	add	r3, r2
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	4403      	add	r3, r0
 800036c:	330c      	adds	r3, #12
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	ea41 0204 	orr.w	r2, r1, r4
 8000374:	601a      	str	r2, [r3, #0]

}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bc90      	pop	{r4, r7}
 800037e:	4770      	bx	lr
 8000380:	20000000 	.word	0x20000000

08000384 <main>:
void USART_INIT(void);
void USART_Transmit(char data);
int i = 0;
char Data[] ={ 'H','e','l','l','o',' ','W','o','r','l','d'};

int main(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
GPIO_EnableClock(0); //enable port A clk
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ff23 	bl	80001d4 <GPIO_EnableClock>
GPIO_Init(0, 2 , ALTERNATE_FUN, PUSH_PULL);
 800038e:	2300      	movs	r3, #0
 8000390:	2202      	movs	r2, #2
 8000392:	2102      	movs	r1, #2
 8000394:	2000      	movs	r0, #0
 8000396:	f7ff ff35 	bl	8000204 <GPIO_Init>
USART_INIT();
 800039a:	f000 f80d 	bl	80003b8 <USART_INIT>
USART_Transmit(Data[i]);
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <main+0x2c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <main+0x30>)
 80003a4:	5cd3      	ldrb	r3, [r2, r3]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 f846 	bl	8000438 <USART_Transmit>

while(1)
 80003ac:	e7fe      	b.n	80003ac <main+0x28>
 80003ae:	bf00      	nop
 80003b0:	20000058 	.word	0x20000058
 80003b4:	20000030 	.word	0x20000030

080003b8 <USART_INIT>:
{	}
	return 0; }

void USART_INIT(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	*RCC_APB1ENR|=(1<<17); //enable clk for USART2
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <USART_INIT+0x6c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a18      	ldr	r2, [pc, #96]	; (8000424 <USART_INIT+0x6c>)
 80003c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c6:	6013      	str	r3, [r2, #0]
	*USART_BRR=0x683; // to get 9600 baud_rate
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <USART_INIT+0x70>)
 80003ca:	f240 6283 	movw	r2, #1667	; 0x683
 80003ce:	601a      	str	r2, [r3, #0]
	*USART_CR1|=(1<<3); // 1 to enable transmitter
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <USART_INIT+0x74>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a15      	ldr	r2, [pc, #84]	; (800042c <USART_INIT+0x74>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6013      	str	r3, [r2, #0]
	*USART_CR1&=~(1<<12);// 0 to (8 data bits) word length
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <USART_INIT+0x74>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a12      	ldr	r2, [pc, #72]	; (800042c <USART_INIT+0x74>)
 80003e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003e6:	6013      	str	r3, [r2, #0]
	*USART_CR1|=(1<<13); // 1 to enable USART
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <USART_INIT+0x74>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0f      	ldr	r2, [pc, #60]	; (800042c <USART_INIT+0x74>)
 80003ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003f2:	6013      	str	r3, [r2, #0]
	*USART_CR1&=~(1<<15); //0  to oversample by 16
 80003f4:	4b0d      	ldr	r3, [pc, #52]	; (800042c <USART_INIT+0x74>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <USART_INIT+0x74>)
 80003fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003fe:	6013      	str	r3, [r2, #0]
	*USART_CR2 &=~((0x03)<<12); // to get 1 stop bit
 8000400:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <USART_INIT+0x78>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <USART_INIT+0x78>)
 8000406:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800040a:	6013      	str	r3, [r2, #0]
	*GPIOA_AFRL|=((0x07)<<8); // AF7
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <USART_INIT+0x7c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a08      	ldr	r2, [pc, #32]	; (8000434 <USART_INIT+0x7c>)
 8000412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40023840 	.word	0x40023840
 8000428:	40004408 	.word	0x40004408
 800042c:	4000440c 	.word	0x4000440c
 8000430:	40004410 	.word	0x40004410
 8000434:	40020020 	.word	0x40020020

08000438 <USART_Transmit>:

void USART_Transmit(char data)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	while(i<=11)
 8000442:	e010      	b.n	8000466 <USART_Transmit+0x2e>
	 {   	// to check the transmission of 1 bit completed
		   while((((*USART_SR) >> 6)&1))
		   {*USART_DR = Data[i];
 8000444:	4b0d      	ldr	r3, [pc, #52]	; (800047c <USART_Transmit+0x44>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <USART_Transmit+0x48>)
 800044a:	5cd2      	ldrb	r2, [r2, r3]
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <USART_Transmit+0x4c>)
 800044e:	601a      	str	r2, [r3, #0]
		    (i++);
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <USART_Transmit+0x44>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	4a09      	ldr	r2, [pc, #36]	; (800047c <USART_Transmit+0x44>)
 8000458:	6013      	str	r3, [r2, #0]
		   while((((*USART_SR) >> 6)&1))
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <USART_Transmit+0x50>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000462:	2b00      	cmp	r3, #0
 8000464:	d1ee      	bne.n	8000444 <USART_Transmit+0xc>
	while(i<=11)
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <USART_Transmit+0x44>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b0b      	cmp	r3, #11
 800046c:	ddf5      	ble.n	800045a <USART_Transmit+0x22>
		   }
	 }
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	20000058 	.word	0x20000058
 8000480:	20000030 	.word	0x20000030
 8000484:	40004404 	.word	0x40004404
 8000488:	40004400 	.word	0x40004400

0800048c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <SystemInit+0x20>)
 8000492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000496:	4a05      	ldr	r2, [pc, #20]	; (80004ac <SystemInit+0x20>)
 8000498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800049c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004b6:	490e      	ldr	r1, [pc, #56]	; (80004f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004b8:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004bc:	e002      	b.n	80004c4 <LoopCopyDataInit>

080004be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c2:	3304      	adds	r3, #4

080004c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c8:	d3f9      	bcc.n	80004be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ca:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004cc:	4c0b      	ldr	r4, [pc, #44]	; (80004fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d0:	e001      	b.n	80004d6 <LoopFillZerobss>

080004d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d4:	3204      	adds	r2, #4

080004d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d8:	d3fb      	bcc.n	80004d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004da:	f7ff ffd7 	bl	800048c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004de:	f000 f811 	bl	8000504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004e2:	f7ff ff4f 	bl	8000384 <main>
  bx  lr    
 80004e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80004f4:	0800056c 	.word	0x0800056c
  ldr r2, =_sbss
 80004f8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80004fc:	2000005c 	.word	0x2000005c

08000500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC_IRQHandler>
	...

08000504 <__libc_init_array>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	4d0d      	ldr	r5, [pc, #52]	; (800053c <__libc_init_array+0x38>)
 8000508:	4c0d      	ldr	r4, [pc, #52]	; (8000540 <__libc_init_array+0x3c>)
 800050a:	1b64      	subs	r4, r4, r5
 800050c:	10a4      	asrs	r4, r4, #2
 800050e:	2600      	movs	r6, #0
 8000510:	42a6      	cmp	r6, r4
 8000512:	d109      	bne.n	8000528 <__libc_init_array+0x24>
 8000514:	4d0b      	ldr	r5, [pc, #44]	; (8000544 <__libc_init_array+0x40>)
 8000516:	4c0c      	ldr	r4, [pc, #48]	; (8000548 <__libc_init_array+0x44>)
 8000518:	f000 f818 	bl	800054c <_init>
 800051c:	1b64      	subs	r4, r4, r5
 800051e:	10a4      	asrs	r4, r4, #2
 8000520:	2600      	movs	r6, #0
 8000522:	42a6      	cmp	r6, r4
 8000524:	d105      	bne.n	8000532 <__libc_init_array+0x2e>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f855 3b04 	ldr.w	r3, [r5], #4
 800052c:	4798      	blx	r3
 800052e:	3601      	adds	r6, #1
 8000530:	e7ee      	b.n	8000510 <__libc_init_array+0xc>
 8000532:	f855 3b04 	ldr.w	r3, [r5], #4
 8000536:	4798      	blx	r3
 8000538:	3601      	adds	r6, #1
 800053a:	e7f2      	b.n	8000522 <__libc_init_array+0x1e>
 800053c:	08000564 	.word	0x08000564
 8000540:	08000564 	.word	0x08000564
 8000544:	08000564 	.word	0x08000564
 8000548:	08000568 	.word	0x08000568

0800054c <_init>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr

08000558 <_fini>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr
