
Lab5_Keypad1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000614  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007a8  080007a8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007a8  080007a8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080007a8  080007a8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a8  080007a8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a8  080007a8  000107a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007ac  080007ac  000107ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080007b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000018  080007c8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080007c8  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e7e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a5  00000000  00000000  00020ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00021370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00021458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df85  00000000  00000000  000214f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001581  00000000  00000000  0002f47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fdc0  00000000  00000000  000309fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000807be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000022c  00000000  00000000  00080814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000790 	.word	0x08000790

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000790 	.word	0x08000790

080001d4 <GPIO_EnableClock>:
#define _OUTTYPE_SHIFT 0

#define _PUPD_MASK ((unsigned char)0x06)
#define _PUPD_SHIFT 1

void GPIO_EnableClock(char PortName) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  switch (PortName) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b41      	cmp	r3, #65	; 0x41
 80001e2:	d002      	beq.n	80001ea <GPIO_EnableClock+0x16>
 80001e4:	2b42      	cmp	r3, #66	; 0x42
 80001e6:	d007      	beq.n	80001f8 <GPIO_EnableClock+0x24>
      break;
    case 'B':
      RCC_AHB1ENR |= (0x01 << 1);
      break;
    default:
      break;
 80001e8:	e00d      	b.n	8000206 <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 0);
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <GPIO_EnableClock+0x40>)
 80001ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <GPIO_EnableClock+0x40>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80001f6:	e006      	b.n	8000206 <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 1);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <GPIO_EnableClock+0x40>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a05      	ldr	r2, [pc, #20]	; (8000214 <GPIO_EnableClock+0x40>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000204:	bf00      	nop
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40023800 	.word	0x40023800

08000218 <GPIO_Init>:

void GPIO_Init(char PortName, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000218:	b490      	push	{r4, r7}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4604      	mov	r4, r0
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4623      	mov	r3, r4
 8000228:	71fb      	strb	r3, [r7, #7]
 800022a:	4603      	mov	r3, r0
 800022c:	71bb      	strb	r3, [r7, #6]
 800022e:	460b      	mov	r3, r1
 8000230:	717b      	strb	r3, [r7, #5]
 8000232:	4613      	mov	r3, r2
 8000234:	713b      	strb	r3, [r7, #4]
  switch (PortName) {
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	2b41      	cmp	r3, #65	; 0x41
 800023a:	d002      	beq.n	8000242 <GPIO_Init+0x2a>
 800023c:	2b42      	cmp	r3, #66	; 0x42
 800023e:	d049      	beq.n	80002d4 <GPIO_Init+0xbc>

      GPIOB_PUPDR &= ~(0x03 << 2 * PinNum);
      GPIOB_PUPDR |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
      break;
  }
}
 8000240:	e091      	b.n	8000366 <GPIO_Init+0x14e>
      GPIOA_MODER &= ~(0x03 << 2 * PinNum);
 8000242:	4b4b      	ldr	r3, [pc, #300]	; (8000370 <GPIO_Init+0x158>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0052      	lsls	r2, r2, #1
 800024a:	2103      	movs	r1, #3
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a46      	ldr	r2, [pc, #280]	; (8000370 <GPIO_Init+0x158>)
 8000256:	400b      	ands	r3, r1
 8000258:	6013      	str	r3, [r2, #0]
      GPIOA_MODER |= PinMode << 2 * PinNum;
 800025a:	4b45      	ldr	r3, [pc, #276]	; (8000370 <GPIO_Init+0x158>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	7979      	ldrb	r1, [r7, #5]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0052      	lsls	r2, r2, #1
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a41      	ldr	r2, [pc, #260]	; (8000370 <GPIO_Init+0x158>)
 800026c:	430b      	orrs	r3, r1
 800026e:	6013      	str	r3, [r2, #0]
      GPIOA_OTYPER &= ~(1 << PinNum);
 8000270:	4b3f      	ldr	r3, [pc, #252]	; (8000370 <GPIO_Init+0x158>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	79ba      	ldrb	r2, [r7, #6]
 8000276:	2101      	movs	r1, #1
 8000278:	fa01 f202 	lsl.w	r2, r1, r2
 800027c:	43d2      	mvns	r2, r2
 800027e:	4611      	mov	r1, r2
 8000280:	4a3b      	ldr	r2, [pc, #236]	; (8000370 <GPIO_Init+0x158>)
 8000282:	400b      	ands	r3, r1
 8000284:	6053      	str	r3, [r2, #4]
      GPIOA_OTYPER |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 8000286:	4b3a      	ldr	r3, [pc, #232]	; (8000370 <GPIO_Init+0x158>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	793a      	ldrb	r2, [r7, #4]
 800028c:	f002 0101 	and.w	r1, r2, #1
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	4611      	mov	r1, r2
 8000298:	4a35      	ldr	r2, [pc, #212]	; (8000370 <GPIO_Init+0x158>)
 800029a:	430b      	orrs	r3, r1
 800029c:	6053      	str	r3, [r2, #4]
      GPIOA_PUPDR &= ~(0x03 << 2 * PinNum);
 800029e:	4b34      	ldr	r3, [pc, #208]	; (8000370 <GPIO_Init+0x158>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	79ba      	ldrb	r2, [r7, #6]
 80002a4:	0052      	lsls	r2, r2, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	43d2      	mvns	r2, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a2f      	ldr	r2, [pc, #188]	; (8000370 <GPIO_Init+0x158>)
 80002b2:	400b      	ands	r3, r1
 80002b4:	60d3      	str	r3, [r2, #12]
      GPIOA_PUPDR |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 80002b6:	4b2e      	ldr	r3, [pc, #184]	; (8000370 <GPIO_Init+0x158>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	793a      	ldrb	r2, [r7, #4]
 80002bc:	1052      	asrs	r2, r2, #1
 80002be:	f002 0103 	and.w	r1, r2, #3
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a28      	ldr	r2, [pc, #160]	; (8000370 <GPIO_Init+0x158>)
 80002ce:	430b      	orrs	r3, r1
 80002d0:	60d3      	str	r3, [r2, #12]
      break;
 80002d2:	e048      	b.n	8000366 <GPIO_Init+0x14e>
      GPIOB_MODER &= ~(0x03 << 2 * PinNum);
 80002d4:	4b27      	ldr	r3, [pc, #156]	; (8000374 <GPIO_Init+0x15c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	79ba      	ldrb	r2, [r7, #6]
 80002da:	0052      	lsls	r2, r2, #1
 80002dc:	2103      	movs	r1, #3
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	43d2      	mvns	r2, r2
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a23      	ldr	r2, [pc, #140]	; (8000374 <GPIO_Init+0x15c>)
 80002e8:	400b      	ands	r3, r1
 80002ea:	6013      	str	r3, [r2, #0]
      GPIOB_MODER |= PinMode << 2 * PinNum;
 80002ec:	4b21      	ldr	r3, [pc, #132]	; (8000374 <GPIO_Init+0x15c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	7979      	ldrb	r1, [r7, #5]
 80002f2:	79ba      	ldrb	r2, [r7, #6]
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	4611      	mov	r1, r2
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <GPIO_Init+0x15c>)
 80002fe:	430b      	orrs	r3, r1
 8000300:	6013      	str	r3, [r2, #0]
      GPIOB_OTYPER &= ~(1 << PinNum);
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <GPIO_Init+0x15c>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	79ba      	ldrb	r2, [r7, #6]
 8000308:	2101      	movs	r1, #1
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	43d2      	mvns	r2, r2
 8000310:	4611      	mov	r1, r2
 8000312:	4a18      	ldr	r2, [pc, #96]	; (8000374 <GPIO_Init+0x15c>)
 8000314:	400b      	ands	r3, r1
 8000316:	6053      	str	r3, [r2, #4]
      GPIOB_OTYPER |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 8000318:	4b16      	ldr	r3, [pc, #88]	; (8000374 <GPIO_Init+0x15c>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	793a      	ldrb	r2, [r7, #4]
 800031e:	f002 0101 	and.w	r1, r2, #1
 8000322:	79ba      	ldrb	r2, [r7, #6]
 8000324:	fa01 f202 	lsl.w	r2, r1, r2
 8000328:	4611      	mov	r1, r2
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <GPIO_Init+0x15c>)
 800032c:	430b      	orrs	r3, r1
 800032e:	6053      	str	r3, [r2, #4]
      GPIOB_PUPDR &= ~(0x03 << 2 * PinNum);
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <GPIO_Init+0x15c>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	79ba      	ldrb	r2, [r7, #6]
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	2103      	movs	r1, #3
 800033a:	fa01 f202 	lsl.w	r2, r1, r2
 800033e:	43d2      	mvns	r2, r2
 8000340:	4611      	mov	r1, r2
 8000342:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <GPIO_Init+0x15c>)
 8000344:	400b      	ands	r3, r1
 8000346:	60d3      	str	r3, [r2, #12]
      GPIOB_PUPDR |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <GPIO_Init+0x15c>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	793a      	ldrb	r2, [r7, #4]
 800034e:	1052      	asrs	r2, r2, #1
 8000350:	f002 0103 	and.w	r1, r2, #3
 8000354:	79ba      	ldrb	r2, [r7, #6]
 8000356:	0052      	lsls	r2, r2, #1
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <GPIO_Init+0x15c>)
 8000360:	430b      	orrs	r3, r1
 8000362:	60d3      	str	r3, [r2, #12]
      break;
 8000364:	bf00      	nop
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bc90      	pop	{r4, r7}
 800036e:	4770      	bx	lr
 8000370:	40020000 	.word	0x40020000
 8000374:	40020400 	.word	0x40020400

08000378 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char PortName, unsigned char PinNum,
                            unsigned char Data) {
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
 8000382:	460b      	mov	r3, r1
 8000384:	71bb      	strb	r3, [r7, #6]
 8000386:	4613      	mov	r3, r2
 8000388:	717b      	strb	r3, [r7, #5]
  unsigned char result;
  switch (PortName) {
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b41      	cmp	r3, #65	; 0x41
 800038e:	d002      	beq.n	8000396 <GPIO_WritePin+0x1e>
 8000390:	2b42      	cmp	r3, #66	; 0x42
 8000392:	d02d      	beq.n	80003f0 <GPIO_WritePin+0x78>
 8000394:	e059      	b.n	800044a <GPIO_WritePin+0xd2>
    case ('A'):
      if (((GPIOA_MODER & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 8000396:	4b32      	ldr	r3, [pc, #200]	; (8000460 <GPIO_WritePin+0xe8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	79ba      	ldrb	r2, [r7, #6]
 800039c:	0052      	lsls	r2, r2, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f202 	lsl.w	r2, r1, r2
 80003a4:	401a      	ands	r2, r3
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	fa22 f303 	lsr.w	r3, r2, r3
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d11b      	bne.n	80003ea <GPIO_WritePin+0x72>
        if (Data) {
 80003b2:	797b      	ldrb	r3, [r7, #5]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d00a      	beq.n	80003ce <GPIO_WritePin+0x56>
          GPIOA_ODR |= (1 << PinNum);
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <GPIO_WritePin+0xe8>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	79ba      	ldrb	r2, [r7, #6]
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a26      	ldr	r2, [pc, #152]	; (8000460 <GPIO_WritePin+0xe8>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	e00a      	b.n	80003e4 <GPIO_WritePin+0x6c>
        } else {
          GPIOA_ODR &= ~(1 << PinNum);
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <GPIO_WritePin+0xe8>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	79ba      	ldrb	r2, [r7, #6]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	43d2      	mvns	r2, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a20      	ldr	r2, [pc, #128]	; (8000460 <GPIO_WritePin+0xe8>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6153      	str	r3, [r2, #20]
        }
        result = OK;
 80003e4:	2300      	movs	r3, #0
 80003e6:	73fb      	strb	r3, [r7, #15]
      } else {
        result = NOK;
      }
      break;
 80003e8:	e032      	b.n	8000450 <GPIO_WritePin+0xd8>
        result = NOK;
 80003ea:	2301      	movs	r3, #1
 80003ec:	73fb      	strb	r3, [r7, #15]
      break;
 80003ee:	e02f      	b.n	8000450 <GPIO_WritePin+0xd8>
    case ('B'):
      if (((GPIOB_MODER & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <GPIO_WritePin+0xec>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	79ba      	ldrb	r2, [r7, #6]
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	2103      	movs	r1, #3
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	401a      	ands	r2, r3
 8000400:	79bb      	ldrb	r3, [r7, #6]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	fa22 f303 	lsr.w	r3, r2, r3
 8000408:	2b01      	cmp	r3, #1
 800040a:	d11b      	bne.n	8000444 <GPIO_WritePin+0xcc>
        if (Data) {
 800040c:	797b      	ldrb	r3, [r7, #5]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d00a      	beq.n	8000428 <GPIO_WritePin+0xb0>
          GPIOB_ODR |= (1 << PinNum);
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <GPIO_WritePin+0xec>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	79ba      	ldrb	r2, [r7, #6]
 8000418:	2101      	movs	r1, #1
 800041a:	fa01 f202 	lsl.w	r2, r1, r2
 800041e:	4611      	mov	r1, r2
 8000420:	4a10      	ldr	r2, [pc, #64]	; (8000464 <GPIO_WritePin+0xec>)
 8000422:	430b      	orrs	r3, r1
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	e00a      	b.n	800043e <GPIO_WritePin+0xc6>
        } else {
          GPIOB_ODR &= ~(1 << PinNum);
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <GPIO_WritePin+0xec>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	79ba      	ldrb	r2, [r7, #6]
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	43d2      	mvns	r2, r2
 8000436:	4611      	mov	r1, r2
 8000438:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <GPIO_WritePin+0xec>)
 800043a:	400b      	ands	r3, r1
 800043c:	6153      	str	r3, [r2, #20]
        }
        result = OK;
 800043e:	2300      	movs	r3, #0
 8000440:	73fb      	strb	r3, [r7, #15]
      } else {
        result = NOK;
      }
      break;
 8000442:	e005      	b.n	8000450 <GPIO_WritePin+0xd8>
        result = NOK;
 8000444:	2301      	movs	r3, #1
 8000446:	73fb      	strb	r3, [r7, #15]
      break;
 8000448:	e002      	b.n	8000450 <GPIO_WritePin+0xd8>
    default:
      result = NOK;
 800044a:	2301      	movs	r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]
      break;
 800044e:	bf00      	nop
  }  // end switch

  return result;
 8000450:	7bfb      	ldrb	r3, [r7, #15]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40020000 	.word	0x40020000
 8000464:	40020400 	.word	0x40020400

08000468 <GPIO_ReadPin>:

unsigned char GPIO_ReadPin(char PortName, unsigned char PinNum) {
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	460a      	mov	r2, r1
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	71bb      	strb	r3, [r7, #6]
  unsigned char data = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	73fb      	strb	r3, [r7, #15]
  switch (PortName) {
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	2b41      	cmp	r3, #65	; 0x41
 8000480:	d002      	beq.n	8000488 <GPIO_ReadPin+0x20>
 8000482:	2b42      	cmp	r3, #66	; 0x42
 8000484:	d00c      	beq.n	80004a0 <GPIO_ReadPin+0x38>
      break;
    case 'B':
      data = (GPIOB_IDR & (1 << PinNum)) >> PinNum;
      break;
    default:
      break;
 8000486:	e017      	b.n	80004b8 <GPIO_ReadPin+0x50>
      data = (GPIOA_IDR & (1 << PinNum)) >> PinNum;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <GPIO_ReadPin+0x60>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	79ba      	ldrb	r2, [r7, #6]
 800048e:	2101      	movs	r1, #1
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	401a      	ands	r2, r3
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	fa22 f303 	lsr.w	r3, r2, r3
 800049c:	73fb      	strb	r3, [r7, #15]
      break;
 800049e:	e00b      	b.n	80004b8 <GPIO_ReadPin+0x50>
      data = (GPIOB_IDR & (1 << PinNum)) >> PinNum;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <GPIO_ReadPin+0x64>)
 80004a2:	691b      	ldr	r3, [r3, #16]
 80004a4:	79ba      	ldrb	r2, [r7, #6]
 80004a6:	2101      	movs	r1, #1
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	401a      	ands	r2, r3
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	fa22 f303 	lsr.w	r3, r2, r3
 80004b4:	73fb      	strb	r3, [r7, #15]
      break;
 80004b6:	bf00      	nop
  }
  return data;
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40020000 	.word	0x40020000
 80004cc:	40020400 	.word	0x40020400

080004d0 <Keypad_init>:
						{4,5,6},
						{7,8,9},
						{'*',0,'#'}};


void  Keypad_init  () {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	GPIO_EnableClock('B');
 80004d6:	2042      	movs	r0, #66	; 0x42
 80004d8:	f7ff fe7c 	bl	80001d4 <GPIO_EnableClock>
	for (int col = 0; col < 3; col++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	e009      	b.n	80004f6 <Keypad_init+0x26>
	    GPIO_Init('B', col, OUTPUT, PUSH_PULL);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	b2d9      	uxtb	r1, r3
 80004e6:	2300      	movs	r3, #0
 80004e8:	2201      	movs	r2, #1
 80004ea:	2042      	movs	r0, #66	; 0x42
 80004ec:	f7ff fe94 	bl	8000218 <GPIO_Init>
	for (int col = 0; col < 3; col++) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	ddf2      	ble.n	80004e2 <Keypad_init+0x12>
	  }
	for (int row = 3; row < 7; row++) {
 80004fc:	2303      	movs	r3, #3
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	e009      	b.n	8000516 <Keypad_init+0x46>
	 	GPIO_Init('B', row, INPUT, PULL_UP);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	b2d9      	uxtb	r1, r3
 8000506:	2302      	movs	r3, #2
 8000508:	2200      	movs	r2, #0
 800050a:	2042      	movs	r0, #66	; 0x42
 800050c:	f7ff fe84 	bl	8000218 <GPIO_Init>
	for (int row = 3; row < 7; row++) {
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b06      	cmp	r3, #6
 800051a:	ddf2      	ble.n	8000502 <Keypad_init+0x32>
	 	  }
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <Keypad_manage>:

void Keypad_manage() {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
	if (button_state==0)
 800052e:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <Keypad_manage+0xa8>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d147      	bne.n	80005c6 <Keypad_manage+0x9e>
	 {for (int col = 0; col < 3; col++){
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e041      	b.n	80005c0 <Keypad_manage+0x98>
		   GPIO_WritePin('B', col, 0);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2200      	movs	r2, #0
 8000542:	4619      	mov	r1, r3
 8000544:	2042      	movs	r0, #66	; 0x42
 8000546:	f7ff ff17 	bl	8000378 <GPIO_WritePin>
		   for (int row = 0; row < 4; row++) {
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	e02a      	b.n	80005a6 <Keypad_manage+0x7e>
		         if (GPIO_ReadPin('B', row+3) == 0) {
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	3303      	adds	r3, #3
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	2042      	movs	r0, #66	; 0x42
 800055c:	f7ff ff84 	bl	8000468 <GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d11c      	bne.n	80005a0 <Keypad_manage+0x78>
		            delay30ms();                      // -> Read button
 8000566:	f000 f84f 	bl	8000608 <delay30ms>
		            if (GPIO_ReadPin('B', row+3) == 0) {
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	3303      	adds	r3, #3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4619      	mov	r1, r3
 8000574:	2042      	movs	r0, #66	; 0x42
 8000576:	f7ff ff77 	bl	8000468 <GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d10f      	bne.n	80005a0 <Keypad_manage+0x78>
		                key= Keypad_arr[row][col];
 8000580:	4914      	ldr	r1, [pc, #80]	; (80005d4 <Keypad_manage+0xac>)
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	4613      	mov	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4413      	add	r3, r2
 800058a:	18ca      	adds	r2, r1, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <Keypad_manage+0xb0>)
 8000594:	701a      	strb	r2, [r3, #0]
		            	button_state = 1;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <Keypad_manage+0xa8>)
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
		            	KeypadCallouts_KeyPressNotificaton(); // by user
 800059c:	f000 f84a 	bl	8000634 <KeypadCallouts_KeyPressNotificaton>
		   for (int row = 0; row < 4; row++) {
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	ddd1      	ble.n	8000550 <Keypad_manage+0x28>
		            	}
		         	 }
		   	   	  }
		 GPIO_WritePin('B', col, 1);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2201      	movs	r2, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	2042      	movs	r0, #66	; 0x42
 80005b6:	f7ff fedf 	bl	8000378 <GPIO_WritePin>
	 {for (int col = 0; col < 3; col++){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3301      	adds	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	ddba      	ble.n	800053c <Keypad_manage+0x14>
	   }
	 }

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000034 	.word	0x20000034
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000038 	.word	0x20000038

080005dc <Keypad_GetKey>:

char Keypad_GetKey (void){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
 if (button_state==1) //button pressed
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <Keypad_GetKey+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d105      	bne.n	80005f4 <Keypad_GetKey+0x18>
    {button_state=0;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <Keypad_GetKey+0x24>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
     return key; }
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <Keypad_GetKey+0x28>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	e000      	b.n	80005f6 <Keypad_GetKey+0x1a>
 else
	 return -1 ;
 80005f4:	23ff      	movs	r3, #255	; 0xff
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000034 	.word	0x20000034
 8000604:	20000038 	.word	0x20000038

08000608 <delay30ms>:

void KeypadCallouts_KeyPressNotificaton();
unsigned char counter ;
unsigned char sevenSegHex[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66,
                                   0x6D, 0x7D, 0x07, 0x7F, 0x6F};
void delay30ms() {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0

  for (int i = 0; i < 30000; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	e002      	b.n	800061a <delay30ms+0x12>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3301      	adds	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f247 522f 	movw	r2, #29999	; 0x752f
 8000620:	4293      	cmp	r3, r2
 8000622:	ddf7      	ble.n	8000614 <delay30ms+0xc>
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <KeypadCallouts_KeyPressNotificaton>:

void KeypadCallouts_KeyPressNotificaton(){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	counter=Keypad_GetKey ();
 800063a:	f7ff ffcf 	bl	80005dc <Keypad_GetKey>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <KeypadCallouts_KeyPressNotificaton+0x5c>)
 8000644:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 7; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e018      	b.n	800067e <KeypadCallouts_KeyPressNotificaton+0x4a>
	  GPIO_WritePin('A', i, (sevenSegHex[counter] & (1 << i)) >> i); }
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	b2d9      	uxtb	r1, r3
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <KeypadCallouts_KeyPressNotificaton+0x5c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <KeypadCallouts_KeyPressNotificaton+0x60>)
 8000658:	5c9b      	ldrb	r3, [r3, r2]
 800065a:	4618      	mov	r0, r3
 800065c:	2201      	movs	r2, #1
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	ea00 0203 	and.w	r2, r0, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	fa42 f303 	asr.w	r3, r2, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	2041      	movs	r0, #65	; 0x41
 8000674:	f7ff fe80 	bl	8000378 <GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b06      	cmp	r3, #6
 8000682:	dde3      	ble.n	800064c <KeypadCallouts_KeyPressNotificaton+0x18>
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000039 	.word	0x20000039
 8000694:	2000000c 	.word	0x2000000c

08000698 <main>:

int main(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  GPIO_EnableClock('A');
 800069e:	2041      	movs	r0, #65	; 0x41
 80006a0:	f7ff fd98 	bl	80001d4 <GPIO_EnableClock>
  for (int i = 0; i < 7; i++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	e009      	b.n	80006be <main+0x26>
    GPIO_Init('A', i, OUTPUT, PUSH_PULL);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	b2d9      	uxtb	r1, r3
 80006ae:	2300      	movs	r3, #0
 80006b0:	2201      	movs	r2, #1
 80006b2:	2041      	movs	r0, #65	; 0x41
 80006b4:	f7ff fdb0 	bl	8000218 <GPIO_Init>
  for (int i = 0; i < 7; i++) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b06      	cmp	r3, #6
 80006c2:	ddf2      	ble.n	80006aa <main+0x12>
  } 
  Keypad_init();
 80006c4:	f7ff ff04 	bl	80004d0 <Keypad_init>
  while (1) {
	  Keypad_manage();
 80006c8:	f7ff ff2e 	bl	8000528 <Keypad_manage>
 80006cc:	e7fc      	b.n	80006c8 <main+0x30>
	...

080006d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <SystemInit+0x20>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <SystemInit+0x20>)
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800072c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006fa:	490e      	ldr	r1, [pc, #56]	; (8000734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000710:	4c0b      	ldr	r4, [pc, #44]	; (8000740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800071e:	f7ff ffd7 	bl	80006d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f000 f811 	bl	8000748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000726:	f7ff ffb7 	bl	8000698 <main>
  bx  lr    
 800072a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800072c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000738:	080007b0 	.word	0x080007b0
  ldr r2, =_sbss
 800073c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000740:	2000003c 	.word	0x2000003c

08000744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC_IRQHandler>
	...

08000748 <__libc_init_array>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	4d0d      	ldr	r5, [pc, #52]	; (8000780 <__libc_init_array+0x38>)
 800074c:	4c0d      	ldr	r4, [pc, #52]	; (8000784 <__libc_init_array+0x3c>)
 800074e:	1b64      	subs	r4, r4, r5
 8000750:	10a4      	asrs	r4, r4, #2
 8000752:	2600      	movs	r6, #0
 8000754:	42a6      	cmp	r6, r4
 8000756:	d109      	bne.n	800076c <__libc_init_array+0x24>
 8000758:	4d0b      	ldr	r5, [pc, #44]	; (8000788 <__libc_init_array+0x40>)
 800075a:	4c0c      	ldr	r4, [pc, #48]	; (800078c <__libc_init_array+0x44>)
 800075c:	f000 f818 	bl	8000790 <_init>
 8000760:	1b64      	subs	r4, r4, r5
 8000762:	10a4      	asrs	r4, r4, #2
 8000764:	2600      	movs	r6, #0
 8000766:	42a6      	cmp	r6, r4
 8000768:	d105      	bne.n	8000776 <__libc_init_array+0x2e>
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000770:	4798      	blx	r3
 8000772:	3601      	adds	r6, #1
 8000774:	e7ee      	b.n	8000754 <__libc_init_array+0xc>
 8000776:	f855 3b04 	ldr.w	r3, [r5], #4
 800077a:	4798      	blx	r3
 800077c:	3601      	adds	r6, #1
 800077e:	e7f2      	b.n	8000766 <__libc_init_array+0x1e>
 8000780:	080007a8 	.word	0x080007a8
 8000784:	080007a8 	.word	0x080007a8
 8000788:	080007a8 	.word	0x080007a8
 800078c:	080007ac 	.word	0x080007ac

08000790 <_init>:
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000792:	bf00      	nop
 8000794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000796:	bc08      	pop	{r3}
 8000798:	469e      	mov	lr, r3
 800079a:	4770      	bx	lr

0800079c <_fini>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	bf00      	nop
 80007a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a2:	bc08      	pop	{r3}
 80007a4:	469e      	mov	lr, r3
 80007a6:	4770      	bx	lr
