
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800039c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800039c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009da  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000024d  00000000  00000000  00010da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00011068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd5f  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a05  00000000  00000000  0001ee0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004faf4  00000000  00000000  0001f814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b4  00000000  00000000  0006f35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800035c 	.word	0x0800035c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800035c 	.word	0x0800035c

080001d4 <main>:
#include "stm32f401cc_interface.h"

int main(void) {
 80001d4:	b4b0      	push	{r4, r5, r7}
 80001d6:	b08d      	sub	sp, #52	; 0x34
 80001d8:	af00      	add	r7, sp, #0
	//enable GPIOB
	RCC_AHB1ENR |=(1<<1);
 80001da:	4b2d      	ldr	r3, [pc, #180]	; (8000290 <main+0xbc>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a2c      	ldr	r2, [pc, #176]	; (8000290 <main+0xbc>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30

	//set input pin for button
	GPIOB_MODER &=~((0x03)<<(2*3));
 80001e6:	4b2b      	ldr	r3, [pc, #172]	; (8000294 <main+0xc0>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a2a      	ldr	r2, [pc, #168]	; (8000294 <main+0xc0>)
 80001ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001f0:	6013      	str	r3, [r2, #0]
	//pull-up for button
	GPIOB_PUPDR |=((0x01)<<(2*3));
 80001f2:	4b28      	ldr	r3, [pc, #160]	; (8000294 <main+0xc0>)
 80001f4:	68db      	ldr	r3, [r3, #12]
 80001f6:	4a27      	ldr	r2, [pc, #156]	; (8000294 <main+0xc0>)
 80001f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001fc:	60d3      	str	r3, [r2, #12]

	//set output pins for leds
	GPIOB_MODER &=~((0x15)<<(2*5));    //clear
 80001fe:	4b25      	ldr	r3, [pc, #148]	; (8000294 <main+0xc0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a24      	ldr	r2, [pc, #144]	; (8000294 <main+0xc0>)
 8000204:	f423 43a8 	bic.w	r3, r3, #21504	; 0x5400
 8000208:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |=((0x15)<<(2*5));
 800020a:	4b22      	ldr	r3, [pc, #136]	; (8000294 <main+0xc0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a21      	ldr	r2, [pc, #132]	; (8000294 <main+0xc0>)
 8000210:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000214:	6013      	str	r3, [r2, #0]
    //push-pull for leds
	GPIOB_OTYPER &=~(0x07<<5);
 8000216:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <main+0xc0>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a1e      	ldr	r2, [pc, #120]	; (8000294 <main+0xc0>)
 800021c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000220:	6053      	str	r3, [r2, #4]

//combination colors
unsigned int colors[ ] = {0x00,0x20,0x40,0x60,0x80,0xA0,0xC0,0xE0};
 8000222:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <main+0xc4>)
 8000224:	463c      	mov	r4, r7
 8000226:	461d      	mov	r5, r3
 8000228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
unsigned int read1,read2;

while (1) {

 for(int a=0;a<8;a++)
 8000234:	2300      	movs	r3, #0
 8000236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000238:	e025      	b.n	8000286 <main+0xb2>
  {
read1=GPIOB_IDR;
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <main+0xc0>)
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	627b      	str	r3, [r7, #36]	; 0x24
//if (read1==1)
for(int i=0;i<3000;i++) {}
 8000240:	2300      	movs	r3, #0
 8000242:	62bb      	str	r3, [r7, #40]	; 0x28
 8000244:	e002      	b.n	800024c <main+0x78>
 8000246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000248:	3301      	adds	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
 800024c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800024e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000252:	4293      	cmp	r3, r2
 8000254:	ddf7      	ble.n	8000246 <main+0x72>
read2=GPIOB_IDR;
 8000256:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <main+0xc0>)
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	623b      	str	r3, [r7, #32]

  if((read1&(1<<3))&& (read2!=read1))
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	f003 0308 	and.w	r3, r3, #8
 8000262:	2b00      	cmp	r3, #0
 8000264:	d00c      	beq.n	8000280 <main+0xac>
 8000266:	6a3a      	ldr	r2, [r7, #32]
 8000268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800026a:	429a      	cmp	r2, r3
 800026c:	d008      	beq.n	8000280 <main+0xac>
   {GPIOB_ODR=colors[a];
 800026e:	4a09      	ldr	r2, [pc, #36]	; (8000294 <main+0xc0>)
 8000270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000278:	440b      	add	r3, r1
 800027a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800027e:	6153      	str	r3, [r2, #20]
 for(int a=0;a<8;a++)
 8000280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000282:	3301      	adds	r3, #1
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000288:	2b07      	cmp	r3, #7
 800028a:	ddd6      	ble.n	800023a <main+0x66>
 800028c:	e7d2      	b.n	8000234 <main+0x60>
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800
 8000294:	40020400 	.word	0x40020400
 8000298:	08000374 	.word	0x08000374

0800029c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <SystemInit+0x20>)
 80002a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002a6:	4a05      	ldr	r2, [pc, #20]	; (80002bc <SystemInit+0x20>)
 80002a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002c6:	490e      	ldr	r1, [pc, #56]	; (8000300 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002c8:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002dc:	4c0b      	ldr	r4, [pc, #44]	; (800030c <LoopFillZerobss+0x26>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002ea:	f7ff ffd7 	bl	800029c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f000 f811 	bl	8000314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f2:	f7ff ff6f 	bl	80001d4 <main>
  bx  lr    
 80002f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	2000001c 	.word	0x2000001c

08000310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <__libc_init_array>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	4d0d      	ldr	r5, [pc, #52]	; (800034c <__libc_init_array+0x38>)
 8000318:	4c0d      	ldr	r4, [pc, #52]	; (8000350 <__libc_init_array+0x3c>)
 800031a:	1b64      	subs	r4, r4, r5
 800031c:	10a4      	asrs	r4, r4, #2
 800031e:	2600      	movs	r6, #0
 8000320:	42a6      	cmp	r6, r4
 8000322:	d109      	bne.n	8000338 <__libc_init_array+0x24>
 8000324:	4d0b      	ldr	r5, [pc, #44]	; (8000354 <__libc_init_array+0x40>)
 8000326:	4c0c      	ldr	r4, [pc, #48]	; (8000358 <__libc_init_array+0x44>)
 8000328:	f000 f818 	bl	800035c <_init>
 800032c:	1b64      	subs	r4, r4, r5
 800032e:	10a4      	asrs	r4, r4, #2
 8000330:	2600      	movs	r6, #0
 8000332:	42a6      	cmp	r6, r4
 8000334:	d105      	bne.n	8000342 <__libc_init_array+0x2e>
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f855 3b04 	ldr.w	r3, [r5], #4
 800033c:	4798      	blx	r3
 800033e:	3601      	adds	r6, #1
 8000340:	e7ee      	b.n	8000320 <__libc_init_array+0xc>
 8000342:	f855 3b04 	ldr.w	r3, [r5], #4
 8000346:	4798      	blx	r3
 8000348:	3601      	adds	r6, #1
 800034a:	e7f2      	b.n	8000332 <__libc_init_array+0x1e>
 800034c:	08000394 	.word	0x08000394
 8000350:	08000394 	.word	0x08000394
 8000354:	08000394 	.word	0x08000394
 8000358:	08000398 	.word	0x08000398

0800035c <_init>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr

08000368 <_fini>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr
